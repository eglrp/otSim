#pragma once

#ifndef __INTERGEN_GENERATED__otSimWrapperInterface_JS_H__
#define __INTERGEN_GENERATED__otSimWrapperInterface_JS_H__

//@file Javascript interface file for otSimWrapperInterface interface generated by intergen
//See LICENSE file for copyright and license information

#include "otSimWrapperInterface.h"

#include <comm/intergen/ifc.js.h>
#include <comm/token.h>

namespace sf {
namespace js {

class otSimWrapperInterface
{
public:

    ////////////////////////////////
    
    ////////////////////////////////
    //@param scriptpath path to js script to bind to
    static iref<sf::otSimWrapperInterface> get( const script_handle& script, const coid::token& bindvar = coid::token(), v8::Handle<v8::Context>* ctx=0 )
    {
        typedef iref<sf::otSimWrapperInterface> (*fn_bind)(const script_handle&, const coid::token&, v8::Handle<v8::Context>*);
        static fn_bind binder = 0;
        static const coid::token ifckey = "sf::otSimWrapperInterface.get@creator.js";

        if (!binder)
            binder = reinterpret_cast<fn_bind>(
                coid::interface_register::get_interface_creator(ifckey));

        if (!binder)
            throw coid::exception("interface binder inaccessible: ") << ifckey;

        return binder(script, bindvar, ctx);
    }
};

} //namespace js
} //namespace


#endif //__INTERGEN_GENERATED__otSimWrapperInterface_JS_H__
