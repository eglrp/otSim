
//@file  interface dispatcher generated by intergen v6
//See LICENSE file for copyright and license information

#include "ifc/otSimWrapperInterface.h"
#include "otSimWrapper.hpp"

#include <comm/ref.h>
#include <comm/singleton.h>
#include <comm/binstring.h>
#include <type_traits>


static_assert(intergen_interface::VERSION == 6, "interface must be rebuilt with a different intergen version");

using namespace coid;

static_assert( std::is_base_of<policy_intrusive_base, otsim_wrapper::otSimWrapper>::value, "class 'otSimWrapper' must be derived from policy_intrusive_base");
static_assert( std::is_base_of<policy_intrusive_base, otsim_wrapper::otSimWrapper>::value, "class 'otSimWrapper' must be derived from policy_intrusive_base");

////////////////////////////////////////////////////////////////////////////////
// interface otSimWrapperInterface of class otSimWrapper

namespace sf {

///
class otSimWrapperInterface_dispatcher : public otSimWrapperInterface
{
private:

    static coid::binstring* _capture;
    static uint16 _instid;
    static ifn_t* _vtable1;
    static ifn_t* _vtable2;

    static ifn_t* get_vtable()
    {
        if (_vtable1) return _vtable1;

        _vtable1 = new ifn_t[8];
        _vtable1[0] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(float)>(&otsim_wrapper::otSimWrapper::updateSimulation));
        _vtable1[1] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(float)>(&otsim_wrapper::otSimWrapper::updatePhysics));
        _vtable1[2] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(double)>(&otsim_wrapper::otSimWrapper::set_time_of_day));
        _vtable1[3] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(float)>(&otsim_wrapper::otSimWrapper::set_timeflow_multiplier));
        _vtable1[4] = reinterpret_cast<ifn_t>(static_cast<void(policy_intrusive_base::*)(int)>(&otsim_wrapper::otSimWrapper::set_day_of_year));
        _vtable1[5] = reinterpret_cast<ifn_t>(static_cast<double(policy_intrusive_base::*)()>(&otsim_wrapper::otSimWrapper::get_time_of_day));
        _vtable1[6] = reinterpret_cast<ifn_t>(static_cast<float(policy_intrusive_base::*)()>(&otsim_wrapper::otSimWrapper::get_timeflow_multiplier));
        _vtable1[7] = reinterpret_cast<ifn_t>(static_cast<int(policy_intrusive_base::*)()>(&otsim_wrapper::otSimWrapper::get_day_of_year));
        return _vtable1;
    }

    #define VT_CALL2(R,F,I) ((*reinterpret_cast<policy_intrusive_base*>(this)).*(reinterpret_cast<R(policy_intrusive_base::*)F>(_vtable1[I])))


    static ifn_t* get_vtable_intercept()
    {
        if (_vtable2) return _vtable2;
        ifn_t* vtable1 = get_vtable();

        _vtable2 = new ifn_t[8];
        _vtable2[0] = vtable1[0];
        _vtable2[1] = vtable1[1];
        _vtable2[2] = vtable1[2];
        _vtable2[3] = vtable1[3];
        _vtable2[4] = vtable1[4];
        _vtable2[5] = vtable1[5];
        _vtable2[6] = vtable1[6];
        _vtable2[7] = vtable1[7];
        return _vtable2;
    }

protected:

    COIDNEWDELETE("sf::otSimWrapperInterface_dispatcher");

    otSimWrapperInterface_dispatcher()
    {}

    bool intergen_bind_capture( coid::binstring* capture, uint instid ) override
    {
        if (instid >= 0xffU)
            return false;

        _instid = uint16(instid << 8U);
        _capture = capture;
        _vtable = _capture ? get_vtable_intercept() : get_vtable();
        return true;
    }

    void intergen_capture_dispatch( uint mid, coid::binstring& bin ) override
    {
        switch(mid) {
        case UMAX32:
        default: throw coid::exception("unknown method id in otSimWrapperInterface capture dispatcher");
        }
    }

    static iref<otSimWrapperInterface> _generic_interface_creator(otsim_wrapper::otSimWrapper* host, otSimWrapperInterface* __here__)
    {
        //cast to dispatch to sidestep protected access restrictions
        otSimWrapperInterface_dispatcher* __disp__ = static_cast<otSimWrapperInterface_dispatcher*>(__here__);
        if (!__disp__)
            __disp__ = new otSimWrapperInterface_dispatcher;

        __disp__->_host.create(host);
        __disp__->_vtable = _capture ? get_vtable_intercept() : get_vtable();

        return __disp__;
    }

public:

    // creator methods

    static iref<otSimWrapperInterface> get( otSimWrapperInterface* __here__ )
    {
        iref<otsim_wrapper::otSimWrapper> __host__ = otsim_wrapper::otSimWrapper::get();
        if (!__host__)
            return 0;
        return _generic_interface_creator(__host__.get(), __here__);
    }

    ///Register interface creators in the global registry
    static void register_interfaces( bool on )
    {
        interface_register::register_interface_creator(
            "sf::otSimWrapperInterface@wrapper",
            on ? (void*)&_generic_interface_creator : nullptr);

        interface_register::register_interface_creator(
            "sf::otSimWrapperInterface.get@2851289527",
            on ? (void*)&get : nullptr);
    }
};

coid::binstring* otSimWrapperInterface_dispatcher::_capture = 0;
uint16 otSimWrapperInterface_dispatcher::_instid = 0xffffU;
intergen_interface::ifn_t* otSimWrapperInterface_dispatcher::_vtable2 = 0;
intergen_interface::ifn_t* otSimWrapperInterface_dispatcher::_vtable1 = 0;


//auto-register the available interface creators
LOCAL_SINGLETON_DEF(ifc_autoregger) otSimWrapperInterface_autoregger = new ifc_autoregger(&otSimWrapperInterface_dispatcher::register_interfaces);

void* force_register_otSimWrapperInterface() {
    LOCAL_SINGLETON_DEF(ifc_autoregger) autoregger = new ifc_autoregger(&otSimWrapperInterface_dispatcher::register_interfaces);
    return autoregger.get();
}

} //namespace sf

